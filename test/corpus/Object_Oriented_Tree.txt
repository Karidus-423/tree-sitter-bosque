=======================================
eADT Decl 1
=======================================

datatype Foo using {
	field f: Int;
} of F1 { } | F2 { };

function main(): Int {
	return F1{3i}.f;
}

---

=======================================
eADT Decl 2
=======================================

datatype Foo using {
	field f: Int;
	invariant $f >= 0i;
} of F1 { } | F2 {
	field g: Bool;
};

function main(): Bool {
	return F2{3i, false}.g;
}

---

=======================================
eADT Decl 3
=======================================

datatype Foo<T> using {
	field f: T;
} of F1 { } | F2 { };

function main(): Int {
	return F1<Int>{3i}.f;
}

---

=======================================
eADT Decl 4
=======================================

concept Bar<U> {
	field f: U;
}

datatype Foo provides Bar<Int> using {
	field g: Bool;
} of F1 {
	invariant $g ==> $f >= 0i;
} | F2 { };

function main(): Int {
	return F1<Int>{3i, true}.f;
}

---


=======================================
eADT Basic 1
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { };

function main(): Int {
	return F1{3i}.f;
}

---

=======================================
eADT Basic 2
=======================================

datatype Foo of
	F1 { field f: Int; invariant $f >= 0i; } |
	F2 { field g: Bool; };

function main(): Bool {
	return F2{false}.g;
}

---

=======================================
eADT Basic 3 (Generic)
=======================================

datatype Foo<T> of
	F1 { field f: T; } |
	F2 { };

function main(): Int {
	return Foo<Int>{3i}.f;
}

---




=======================================
eADT Const 1
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		const c: Int = 3i;
	};

function main(): Int {
	return F1::c;
}

---

=======================================
eADT Const 2
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		const c: Int = 3i;
	};

function main(): Int {
	return Foo::c;
}

---

=======================================
eADT Function 1
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		function foo(): Int { return 3i; }
	};

function main(): Int {
	return F1::foo();
}

---

=======================================
eADT Function 2
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		function foo(): Int { return 3i; }
	};

function main(): Int {
	return Foo::foo();
}

---

=======================================
Entity Inherit Fields 1
=======================================

concept Foo {
	field f: Int;
}
entity Bar provides Foo { }

function main(): Int {
	return Bar{3i}.f;
}

---

=======================================
Entity Inherit Fields 2
=======================================

concept Foo {
	field f: Int;
}
entity Bar provides Foo {
	field g: Bool;
}

function main(): Bool {
	return Bar{3i, true}.g;
}

---

=======================================
Entity Inherit Fields 3 (Multi Concept)
=======================================

concept Foo {
	field f: Int;
}
concept Baz {
	field g: Bool;
}
entity Bar provides Foo, Baz { }

function main(): Int {
	return Bar{3i, true}.f;
}

---

=======================================
Entity Inherit Generic 1
=======================================

concept Foo<T> {
	field f: T;
}
entity Bar<T> provides Foo<T> { }

function main(): Int {
	return Bar<Int>{3i}.f;
}

---

=======================================
Entity Inherit Generic 2 (Renamed Param)
=======================================

concept Foo<U> {
	field f: U;
}
entity Bar<T> provides Foo<T> { }

function main(): Int {
	return Bar<Int>{3i}.f;
}

---

=======================================
Entity Inherit Invariants 1
=======================================

concept Foo {
	field f: Int;
	invariant $f > 0i;
}
entity Bar provides Foo { }

function main(): Int {
	return Bar{3i}.f;
}

---

=======================================
Entity Inherit Invariants 2 (Override)
=======================================

concept Foo {
	field f: Int;
}
entity Bar provides Foo {
	invariant $f > 0i;
}

function main(): Int {
	return Bar{3i}.f;
}

---

=======================================
Entity Inherit Invariants 3 (Composed)
=======================================

concept Foo {
	field f: Int;
	invariant $f != 0i;
}
entity Bar provides Foo {
	invariant $f > 0i;
}

function main(): Int {
	return Bar{3i}.f;
}

---



=======================================
Entity Decl 1
=======================================

entity Foo {
	field f: Int;
}

function main(): Int {
	return Foo{3i}.f;
}

---

=======================================
Entity Decl 2
=======================================

entity Foo {
	field f: Int;
	invariant $f >= 0i;
}

function main(): Int {
	return Foo{3i}.f;
}

---

=======================================
Entity Decl 3
=======================================

entity Foo<T> {
	field f: T;
}

function main(): Int {
	return Foo<Int>{3i}.f;
}

---



=======================================
Entity Default Fields 1
=======================================

entity Foo {
	field f: Int = 3i;
}

function main(): Int {
	return Foo{3i}.f;
}

---

=======================================
Entity Default Fields 2
=======================================

entity Foo {
	field f: Int;
	field g: Int = $f;
}

function main(): Int {
	return Foo{3i}.g;
}

---

=======================================
Entity Consts 1
=======================================

entity Foo {
	const c: Int = 3i;
}

function main(): Int {
	return Foo::c;
}

---

=======================================
Entity Consts 2
=======================================

entity Foo<T> {
	const c: Int = 3i;
}

function main(): Int {
	return Foo::c;
}

---




=======================================
Entity Functions 1
=======================================

entity Foo {
	function foo(): Int {
		return 3i;
	}
}

function main(): Int {
	return Foo::foo();
}

---

=======================================
Entity Functions 2
=======================================

entity Foo<T> {
	function foo(x: T): T {
		return x;
	}
}

function main(): Int {
	return Foo<Int>::foo(3i);
}

---

=======================================
Entity Functions 3
=======================================

entity Foo {
	function foo<T>(x: T): T {
		return x;
	}
}

function main(): Int {
	return Foo::foo<Int>(3i);
}

---

