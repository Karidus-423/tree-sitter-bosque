=======================================
eADT Decl 1
=======================================

datatype Foo using {
	field f: Int;
} of F1 { } | F2 { };

function main(): Int {
	return F1{3i}.f;
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_block
      (object_body
        (field_statement
          (variable_expression
            (variable_signature
              (identifier)
              (primitive_type))))))
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body))
      (datatype_objects
        (custom_type)
        (object_body))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
eADT Decl 2
=======================================

datatype Foo using {
	field f: Int;
	invariant $f >= 0i;
} of F1 { } | F2 {
	field g: Bool;
};

function main(): Bool {
	return F2{3i, false}.g;
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_block
      (object_body
        (field_statement
          (variable_expression
            (variable_signature
              (identifier)
              (primitive_type))))
        (invariant_statement
          (binary_expression
            (identifier
              (modifier))
            (num_whole)))))
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body))
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole)
                (false_lit))
              (identifier))))))))

=======================================
eADT Decl 3
=======================================

datatype Foo<T> using {
	field f: T;
} of F1 { } | F2 { };

function main(): Int {
	return F1<Int>{3i}.f;
}

---

(source_file
  (datatype_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (datatype_block
      (object_body
        (field_statement
          (variable_expression
            (variable_signature
              (identifier)
              (custom_type))))))
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body))
      (datatype_objects
        (custom_type)
        (object_body))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (template
                  (custom_type)
                  (type_params
                    (type_start)
                    (primitive_type)
                    (type_end)))
                (num_whole))
              (identifier))))))))

=======================================
eADT Decl 4
=======================================

concept Bar<U> {
	field f: U;
}

datatype Foo provides Bar<Int> using {
	field g: Bool;
} of F1 {
	invariant $g ==> $f >= 0i;
} | F2 { };

function main(): Int {
	return F1<Int>{3i, true}.f;
}

---

(source_file
  (concept_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (custom_type))))))
  (datatype_declaration
    (custom_type)
    (object_inherit
      (template
        (custom_type)
        (type_params
          (type_start)
          (primitive_type)
          (type_end))))
    (datatype_block
      (object_body
        (field_statement
          (variable_expression
            (variable_signature
              (identifier)
              (primitive_type))))))
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (invariant_statement
            (binary_expression
              (binary_expression
                (identifier
                  (modifier))
                (identifier
                  (modifier)))
              (num_whole)))))
      (datatype_objects
        (custom_type)
        (object_body))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (template
                  (custom_type)
                  (type_params
                    (type_start)
                    (primitive_type)
                    (type_end)))
                (num_whole)
                (true_lit))
              (identifier))))))))

=======================================
eADT Basic 1
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { };

function main(): Int {
	return F1{3i}.f;
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))
      (datatype_objects
        (custom_type)
        (object_body))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
eADT Basic 2
=======================================

datatype Foo of
	F1 { field f: Int; invariant $f >= 0i; } |
	F2 { field g: Bool; };

function main(): Bool {
	return F2{false}.g;
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))
          (invariant_statement
            (binary_expression
              (identifier
                (modifier))
              (num_whole)))))
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (false_lit))
              (identifier))))))))

=======================================
eADT Basic 3 (Generic)
=======================================

datatype Foo<T> of
	F1 { field f: T; } |
	F2 { };

function main(): Int {
	return Foo<Int>{3i}.f;
}

---

(source_file
  (datatype_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (custom_type))))))
      (datatype_objects
        (custom_type)
        (object_body))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (template
                  (custom_type)
                  (type_params
                    (type_start)
                    (primitive_type)
                    (type_end)))
                (num_whole))
              (identifier))))))))

=======================================
eADT Const 1
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		const c: Int = 3i;
	};

function main(): Int {
	return F1::c;
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))
      (datatype_objects
        (custom_type)
        (object_body)))
    (datatype_constant_block
      (object_body
        (variable_statement
          (variable_expression
            (variable_signature
              (identifier)
              (primitive_type))
            (variable_assignment
              (num_whole)))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (identifier))))))))

=======================================
eADT Const 2
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		const c: Int = 3i;
	};

function main(): Int {
	return Foo::c;
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))
      (datatype_objects
        (custom_type)
        (object_body)))
    (datatype_constant_block
      (object_body
        (variable_statement
          (variable_expression
            (variable_signature
              (identifier)
              (primitive_type))
            (variable_assignment
              (num_whole)))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (identifier))))))))

=======================================
eADT Function 1
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		function foo(): Int { return 3i; }
	};

function main(): Int {
	return F1::foo();
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))
      (datatype_objects
        (custom_type)
        (object_body)))
    (datatype_constant_block
      (object_body
        (function_definition
          (function_signature
            (custom_type)
            (function_parameters)
            (function_return_parameters
              (primitive_type))
            (function_usage
              (object_body
                (return_statement
                  (num_whole)))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (function_call
                (custom_type)
                (function_call_parameters)))))))))

=======================================
eADT Function 2
=======================================

datatype Foo of
	F1 { field f: Int; } |
	F2 { } & {
		function foo(): Int { return 3i; }
	};

function main(): Int {
	return Foo::foo();
}

---

(source_file
  (datatype_declaration
    (custom_type)
    (datatype_inheritance
      (datatype_objects
        (custom_type)
        (object_body
          (field_statement
            (variable_expression
              (variable_signature
                (identifier)
                (primitive_type))))))
      (datatype_objects
        (custom_type)
        (object_body)))
    (datatype_constant_block
      (object_body
        (function_definition
          (function_signature
            (custom_type)
            (function_parameters)
            (function_return_parameters
              (primitive_type))
            (function_usage
              (object_body
                (return_statement
                  (num_whole)))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (function_call
                (custom_type)
                (function_call_parameters)))))))))

=======================================
Entity Inherit Fields 1
=======================================

concept Foo {
	field f: Int;
}
entity Bar provides Foo { }

function main(): Int {
	return Bar{3i}.f;
}

---

(source_file
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (entity_declaration
    (custom_type)
    (object_inherit
      (custom_type))
    (object_body))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Inherit Fields 2
=======================================

concept Foo {
	field f: Int;
}
entity Bar provides Foo {
	field g: Bool;
}

function main(): Bool {
	return Bar{3i, true}.g;
}

---

(source_file
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (entity_declaration
    (custom_type)
    (object_inherit
      (custom_type))
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole)
                (true_lit))
              (identifier))))))))

=======================================
Entity Inherit Fields 3 (Multi Concept)
=======================================

concept Foo {
	field f: Int;
}
concept Baz {
	field g: Bool;
}
entity Bar provides Foo, Baz { }

function main(): Int {
	return Bar{3i, true}.f;
}

---

(source_file
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (entity_declaration
    (custom_type)
    (object_inherit
      (custom_type)
      (custom_type))
    (object_body))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole)
                (true_lit))
              (identifier))))))))

=======================================
Entity Inherit Generic 1
=======================================

concept Foo<T> {
	field f: T;
}
entity Bar<T> provides Foo<T> { }

function main(): Int {
	return Bar<Int>{3i}.f;
}

---

(source_file
  (concept_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (custom_type))))))
  (entity_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_inherit
      (template
        (custom_type)
        (type_params
          (type_start)
          (custom_type)
          (type_end))))
    (object_body))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (template
                  (custom_type)
                  (type_params
                    (type_start)
                    (primitive_type)
                    (type_end)))
                (num_whole))
              (identifier))))))))

=======================================
Entity Inherit Generic 2 (Renamed Param)
=======================================

concept Foo<U> {
	field f: U;
}
entity Bar<T> provides Foo<T> { }

function main(): Int {
	return Bar<Int>{3i}.f;
}

---

(source_file
  (concept_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (custom_type))))))
  (entity_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_inherit
      (template
        (custom_type)
        (type_params
          (type_start)
          (custom_type)
          (type_end))))
    (object_body))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (template
                  (custom_type)
                  (type_params
                    (type_start)
                    (primitive_type)
                    (type_end)))
                (num_whole))
              (identifier))))))))

=======================================
Entity Inherit Invariants 1
=======================================

concept Foo {
	field f: Int;
	invariant $f > 0i;
}
entity Bar provides Foo { }

function main(): Int {
	return Bar{3i}.f;
}

---

(source_file
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))
      (invariant_statement
        (binary_expression
          (identifier
            (modifier))
          (num_whole)))))
  (entity_declaration
    (custom_type)
    (object_inherit
      (custom_type))
    (object_body))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Inherit Invariants 2 (Override)
=======================================

concept Foo {
	field f: Int;
}
entity Bar provides Foo {
	invariant $f > 0i;
}

function main(): Int {
	return Bar{3i}.f;
}

---

(source_file
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (entity_declaration
    (custom_type)
    (object_inherit
      (custom_type))
    (object_body
      (invariant_statement
        (binary_expression
          (identifier
            (modifier))
          (num_whole)))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Inherit Invariants 3 (Composed)
=======================================

concept Foo {
	field f: Int;
	invariant $f != 0i;
}
entity Bar provides Foo {
	invariant $f > 0i;
}

function main(): Int {
	return Bar{3i}.f;
}

---

(source_file
  (concept_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))
      (invariant_statement
        (binary_expression
          (identifier
            (modifier))
          (num_whole)))))
  (entity_declaration
    (custom_type)
    (object_inherit
      (custom_type))
    (object_body
      (invariant_statement
        (binary_expression
          (identifier
            (modifier))
          (num_whole)))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Decl 1
=======================================

entity Foo {
	field f: Int;
}

function main(): Int {
	return Foo{3i}.f;
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Decl 2
=======================================

entity Foo {
	field f: Int;
	invariant $f >= 0i;
}

function main(): Int {
	return Foo{3i}.f;
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))
      (invariant_statement
        (binary_expression
          (identifier
            (modifier))
          (num_whole)))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Decl 3
=======================================

entity Foo<T> {
	field f: T;
}

function main(): Int {
	return Foo<Int>{3i}.f;
}

---

(source_file
  (entity_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (custom_type))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (template
                  (custom_type)
                  (type_params
                    (type_start)
                    (primitive_type)
                    (type_end)))
                (num_whole))
              (identifier))))))))

=======================================
Entity Default Fields 1
=======================================

entity Foo {
	field f: Int = 3i;
}

function main(): Int {
	return Foo{3i}.f;
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))
          (variable_assignment
            (num_whole))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Default Fields 2
=======================================

entity Foo {
	field f: Int;
	field g: Int = $f;
}

function main(): Int {
	return Foo{3i}.g;
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))))
      (field_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))
          (variable_assignment
            (identifier
              (modifier)))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (access_expression
              (object_creation
                (custom_type)
                (num_whole))
              (identifier))))))))

=======================================
Entity Consts 1
=======================================

entity Foo {
	const c: Int = 3i;
}

function main(): Int {
	return Foo::c;
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (variable_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))
          (variable_assignment
            (num_whole))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (identifier))))))))

=======================================
Entity Consts 2
=======================================

entity Foo<T> {
	const c: Int = 3i;
}

function main(): Int {
	return Foo::c;
}

---

(source_file
  (entity_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_body
      (variable_statement
        (variable_expression
          (variable_signature
            (identifier)
            (primitive_type))
          (variable_assignment
            (num_whole))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (identifier))))))))

=======================================
Entity Functions 1
=======================================

entity Foo {
	function foo(): Int {
		return 3i;
	}
}

function main(): Int {
	return Foo::foo();
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (function_definition
        (function_signature
          (custom_type)
          (function_parameters)
          (function_return_parameters
            (primitive_type))
          (function_usage
            (object_body
              (return_statement
                (num_whole))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (custom_type)
              (function_call
                (custom_type)
                (function_call_parameters)))))))))

=======================================
Entity Functions 2
=======================================

entity Foo<T> {
	function foo(x: T): T {
		return x;
	}
}

function main(): Int {
	return Foo<Int>::foo(3i);
}

---

(source_file
  (entity_declaration
    (template
      (custom_type)
      (type_params
        (type_start)
        (custom_type)
        (type_end)))
    (object_body
      (function_definition
        (function_signature
          (custom_type)
          (function_parameters
            (variable_expression
              (variable_signature
                (identifier)
                (custom_type))))
          (function_return_parameters
            (custom_type))
          (function_usage
            (object_body
              (return_statement
                (identifier))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (namespace_access_expression
              (template
                (custom_type)
                (type_params
                  (type_start)
                  (primitive_type)
                  (type_end)))
              (function_call
                (custom_type)
                (function_call_parameters
                  (num_whole))))))))))

=======================================
Entity Functions 3
=======================================

entity Foo {
	function foo<T>(x: T): T {
		return x;
	}
}

function main(): Int {
	return Foo::foo<Int>(3i);
}

---

(source_file
  (entity_declaration
    (custom_type)
    (object_body
      (function_definition
        (function_signature
          (template
            (custom_type)
            (type_params
              (type_start)
              (custom_type)
              (type_end)))
          (function_parameters
            (variable_expression
              (variable_signature
                (identifier)
                (custom_type))))
          (function_return_parameters
            (custom_type))
          (function_usage
            (object_body
              (return_statement
                (identifier))))))))
  (function_definition
    (function_signature
      (custom_type)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_usage
        (object_body
          (return_statement
            (function_call
              (template
                (namespace_access_type
                  (custom_type)
                  (custom_type))
                (type_params
                  (type_start)
                  (primitive_type)
                  (type_end)))
              (function_call_parameters
                (num_whole)))))))))
