=======================================
Type Decl of Bool 1
=======================================

type Flag = Bool;

function main(): Flag {
	return true<Flag>;
}

---

(source_file
  (type_decl
    (identifier)
    (primitive_type))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (true_lit)
            (identifier)))))))

=======================================
Type Decl of Number 1
=======================================

type NVal = Int;

function main(): NVal {
	return -2i<NVal>;
}

---

(source_file
  (type_decl
    (identifier)
    (primitive_type))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (num_whole)
            (identifier)))))))

=======================================
Type Decl of Number 2
=======================================

type FVal = Float;

function main(): FVal {
	return 0.0f<FVal>;
}

---

(source_file
  (type_decl
    (identifier)
    (primitive_type))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (num_float)
            (identifier)))))))

=======================================
Type Decl of Number With Value 1
=======================================

type NVal = Int;

function main(): Int {
	let x = -2i<NVal>;
	return x.value;
}

---

(source_file
  (type_decl
    (identifier)
    (primitive_type))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (primitive_type))
      (function_body
        (variable_statement
          (variable_expression
            (variable_definition
              (identifier))
            (type_cast_expression
              (num_whole)
              (identifier))))
        (return_statement
          (entity_access
            (identifier))
          (identifier))))))

=======================================
Type Decl of Strings Without Constraints 1
=======================================

type SV1 = String;

function main(): SV1 {
	return "ok"<SV1>;
}

---

(source_file
  (type_decl
    (identifier)
    (primitive_type))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (string)
            (identifier)))))))

=======================================
Type Decl of Strings Without Constraints 2
=======================================

type SV2 = CString;

function main(): SV2 {
	return 'ok'<SV2>;
}

---

(source_file
  (type_decl
    (identifier)
    (primitive_type))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (cstring)
            (identifier)))))))

=======================================
Type Decl of Strings With Constraints 1
=======================================

type SV1 = String of /[a-z]+/;

function main(): SV1 {
	return "abc"<SV1>;
}

---

(source_file
  (type_decl
    (identifier)
    (bind_regex
      (primitive_type)
      (string_regex)))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (string)
            (identifier)))))))

=======================================
Type Decl of Strings With Constraints 2
=======================================

const re2: CRegex = /[0-9]/;
type SV2 = CString of Main::re2;

function main(): SV2 {
	return '3'<SV2>;
}

---

(source_file
  (const_decl
    (variable_definition
      (identifier)
      (primitive_type))
    (string_regex))
  (type_decl
    (identifier)
    (bind_regex
      (primitive_type)
      (import
        (identifier)
        (identifier))))
  (function_definition
    (function_modifier)
    (function_signature
      (identifier)
      (function_parameters)
      (function_return_parameters
        (identifier))
      (function_body
        (return_statement
          (type_cast_expression
            (cstring)
            (identifier)))))))
