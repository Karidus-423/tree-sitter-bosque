==============================
Simple Call
==============================

function foo(): Int {
	return 1i; 
} 

function main(): Int {
	return foo(); 
}

---


(source_file
	(identifier)
	(num_lit)
	(identifier)
	(identifier)
)

==============================
Simple Call with Arguments
==============================

function foo(x: Int, y: Int): Int {
	return x + y; 
} 

function main(): Int {
	return foo(1i, 2i); 
}

---

(source_file
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(num_lit)
	(num_lit)
)


==============================================================
Simple Call with Accessing Arguments Ordered
==============================================================

function foo(x: Int, y: Int): Int {
	return x + y; 
} 

function main(): Int {
	return foo(x = 1i, y = 2i); 
}

---

(source_file
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (num_lit))

==============================================================
Simple Call with Accessing Arguments Unordered
==============================================================

function foo(x: Int, y: Int): Int {
	return x + y; 
}

function main(): Int {
	return foo(y = 0i, x = 2i); 
}

---

(source_file
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(identifier)
	(num_lit)
	(identifier)
	(num_lit)
)

===============================
Function Call with Scoping
===============================

function foo(x: Int, y: Int): Int {
	return x + y; 
} 

function main(): Int {
	var x: Int = 0i;
	return foo(y = x, x = x); 
}

---

(source_file
      func_name: (identifier)
      params: (identifier)
      params: (identifier)
      func_body: (identifier)
      func_body: (identifier)
      func_name: (identifier)
      var_id: (identifier)
      var_value: (num_lit)
      function_id: (identifier)
      func_body: (identifier)
      func_body: (identifier)
      func_body: (identifier)
      func_body: (identifier)
)


========================================
Function Call with Accessing Mixed 󰀫
========================================

function foo(x: Int, y: Int): Int {
	return x + y; 
}

function main(): Int {
	return foo(y = 1i, 2i); 
}

---
(source_file
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (num_lit))

========================================
Function Call with Accessing Mixed 󰂡
========================================

function foo(x: Int, y: Int): Int {
	return x + y; 
}

function main(): Int {
	return foo(1i, x = 2i); 
}

---

(source_file
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (num_lit))

========================================
Function Call with Accessing Mixed 󱃮
========================================

function foo(x: Int, y: Int): Int {
	return x + y; 
}

function main(): Int {
	return foo(x = 1i, 2i); 
}

---
(source_file
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (num_lit))

========================================
Function Call with Rest
========================================

function foo(x: Int, ...y: List<Int>): Int {
	return x; 
} 

function main(): Int {
	return foo(3i, x = 1i, 33i); 
}

---

(source_file
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (num_lit)
      (num_lit))

========================================
Function Call with Ref
========================================

function foo(ref x: Int): Int {
	return 1i; 
} 

function main(): Int {
	var y: Int = 0i;
	return foo(ref y); 
}

---

(source_file
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (identifier))

========================================
Function Call with Ref
========================================

function foo(x: Int = 3i, y: Int = $x + 1i): Int {
	return x + y; 
} 

function main(): Int {
	return foo(1i, 2i);
}

---

(source_file
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (num_lit))

==================================
Function Call Pre
==================================

function foo(x: Int): Int requires x > 0i; {
	return 1i; 
}

function main(): Int {
	return foo(1i); 
}

----

(source_file
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit))

==================================
Function Call Pre Multiple
==================================

function foo(x: Int): Int requires x > 0i; requires x > 1i; {
	return 1i; 
}

function main(): Int {
	return foo(1i); 
}

----

(source_file
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (identifier)
      (num_lit)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit))

==================================
Function Call Post
==================================

function foo(x: Int): Int ensures $return > 0i; {
	return 1i; 
}
function main(): Int {
	return foo(1i); 
}

----


(source_file
      (identifier)
      (identifier)
      (num_lit)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit))


==================================
Function Call Post Multiple
==================================

function foo(x: Int): Int ensures $return > 0i; ensures $return > 1i; {
	return 1i; 
}

function main(): Int {
	return foo(1i); 
}

---
(source_file
      (identifier)
      (identifier)
      (num_lit)
      (num_lit)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit))

==================================
Function Call Pre & Post
==================================

function foo(x: Int): Int requires x > 0i; ensures $return > 0i; {
	return 1i; 
}
function main(): Int {
	return foo(1i); 
}

---

(source_file
      (identifier)
      (identifier)
      (identifier)
      (num_lit)
      (num_lit)
      (num_lit)
      (identifier)
      (identifier)
      (num_lit))

==================================
Function Call Ref Params
==================================

entity Foo{ }

function foo(ref y: Foo): Int {
	return 1i; 
} 

function main(): Int {
	let ff = Foo{};
	return foo(ref ff); 
}

---

(source_file
      (entity_id)
      (identifier)
      (identifier)
      (entity_id)
      (num_lit)
      (identifier)
      (identifier)
      (entity_id)
      (identifier)
      (identifier))
